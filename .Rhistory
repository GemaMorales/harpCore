# Create test data
dom1 <- structure(
list(
projection = list(
proj  = "lcc",
lon_0 = 10.74,
lat_1 = 59.91,
lat_2 = 59.91,
R     = 6371229
),
nx = 5,
ny = 5,
dx = 50000,
dy = 50000,
clonlat = c(10.74, 59.91)
),
class = "geodomain"
)
dom2 <- structure(
list(
projection = list(
proj  = "lcc",
lon_0 = 10.74,
lat_1 = 59.92,
lat_2 = 59.92,
R     = 6371229
),
nx = 5,
ny = 5,
dx = 50000,
dy = 50000,
clonlat = c(10.75, 59.90)
),
class = "geodomain"
)
geol1 <- lapply(
1:10,
function(x) {
set.seed(x)
structure(
array(runif(dom1$nx * dom1$ny), c(x = dom1$nx, y = dom1$ny)),
domain = dom1,
info   = list(name = "", time = list()),
class  = "geofield"
)
}
)
geo1 <- geol1[[1]]
geol2 <- lapply(
11:20,
function(x) {
set.seed(x)
structure(
array(runif(dom2$nx * dom2$ny), c(x = dom2$nx, y = dom2$ny)),
domain = dom2,
info   = list(name = "", time = list()),
class  = "geofield"
)
}
)
geo2 <- geol2[[1]]
test_that("as_geolist can create geolists from lists and geofields", {
expect_equal(
as_geolist(geol1),
structure(geol1, class = c("geolist", "list"), domain = dom1)
)
expect_equal(
as_geolist(geol2),
structure(geol2, class = c("geolist", "list"), domain = dom2)
)
expect_equal(
as_geolist(geo1, geo1),
structure(list(geo1, geo1), class = c("geolist", "list"), domain = dom1)
)
expect_equal(
as_geolist(geo2, geo2),
structure(list(geo2, geo2), class = c("geolist", "list"), domain = dom2)
)
})
test_that("as_geolist output has correct length", {
expect_equal(length(as_geolist(geol1)), 10)
expect_equal(length(as_geolist(geol2)), 10)
expect_equal(length(as_geolist(c(geol1, geol1))), 20)
expect_equal(length(as_geolist(c(geol2, geol2))), 20)
expect_equal(length(as_geolist(geo1, geo1)), 2)
expect_equal(length(as_geolist(geo2, geo2)), 2)
})
test_that("as_geolist throws error when domains are different", {
expect_error(
as_geolist(geo1, geo2),
"All geofields must be on the same domain"
)
expect_error(
as_geolist(c(geol1, geol2)),
"All geofields must be on the same domain"
)
})
test_that("as_geolist throws error when inputs are not all geofields", {
expect_error(as_geolist(list(1, 2, 3)), "All ... must be geofields")
expect_error(as_geolist(1, 2, 3), "All ... must be geofields")
expect_error(as_geolist(list(geo1, 1)), "All ... must be geofields")
expect_error(as_geolist(geo1, 1), "All ... must be geofields")
expect_error(as_geolist(geo1, unclass(geo1)), "All ... must be geofields")
})
# function to make data to test cumulative math for geolists
test_cum <- function(.geolist, .d, .f) {
res <- .geolist[1]
for (i in 2:length(.geolist)) {
res[[i]] <- .f(.geolist[[i]], res[[(i - 1)]])
}
structure(res, class = c("geolist", "list"), domain = .d)
}
cumsum(as_geolist(geol1)
)
geol1
Reduce(`+`, geol1)
geol[[2]]
geol1[[2]]
geol1[[1]]
geol1[[1]] + geol2[[1]]
geol1[[1]] + geol2[[1]]
library(harpCore)
geol1[[1]] + geol2[[1]]
e1
e2
check_domains(e1, e2)
library(harpCore)
geol1[[1]] + geol2[[1]]
check_domains(e1, e2)
meteogrid::compare.geodomain(e1, e2)
meteogrid::compare.geodomain(meteogrid::as.geodomain(e1), meteogrid::as.geodomain(e2))
e1
e2
meteogrid::as.geodomain(e1)
meteogrid::as.geodomain(e2)
geol1[[1]] + geol1[[1]]
cumsum (geol1)
cumsum(geol1)
cumsum(as_geolist(geol1))
library(harpCore)
mutate(ens_point_df, mbr003 = NULL)
mutate(ens_point_df, mbr003 = rep(NULL, 48))
rbind(det_point_df, mutate(det_point_df, t = 0))
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, mbr003 = mbr001)))
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, mbr003 = point_mbr001)))
lapply(1:10, NULL)
lapply(1:10, function(x) NULL)
as_geolist((lapply(1:10, function(x) NULL))
)
a = ens_point_df
b = dplyr::mutate(ens_grid_df, grid_mbr003 = grid_mbr001)
a
b
rep(b$grid_mbr000, 2)
b
as_geolist(rep(b$grid_mbr000, 2))
expect_equal(
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
tibble(
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
mbr000 = rep(ens_point_df$grid_mbr000, 2),
mbr001 = rep(ens_point_df$grid_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), point_mbr001)
)
)
expect_equal(
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
tibble(
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), point_mbr001)
)
)
ens_point_df
rep(ens_point_df$point_mbr001, 2)
expect_equal(
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
tibble(
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)
)
tibble(
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)
as_harp_df(tibble(
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
))
as_harp_df(tibble(
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)) %>% class()
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001)))
expect_equal(
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
as_harp_df(tibble(
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
SID = rep(ens_point_df$SID, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
))
)
expect_equal(
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_point_df)), rep("b", nrow(ens_point_df)))
fcdate = rep(ens_point_df$fcdate, 2),
expect_equal(
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_point_df)), rep("b", nrow(ens_point_df))),
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
SID = rep(ens_point_df$SID, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
))
)
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_point_df)), rep("b", nrow(ens_point_df))),
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
SID = rep(ens_point_df$SID, 2),
point_mbr000 = rep(ens_point_df$point_mbr000, 2),
point_mbr001 = rep(ens_point_df$point_mbr001, 2),
point_mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)) %>% class()
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_point_df)), rep("b", nrow(ens_point_df))),
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
SID = rep(ens_point_df$SID, 2),
mbr000 = rep(ens_point_df$point_mbr000, 2),
mbr001 = rep(ens_point_df$point_mbr001, 2),
mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)) %>% class()
?rename_with
rename_with(
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_point_df)), rep("b", nrow(ens_point_df))),
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
SID = rep(ens_point_df$SID, 2),
point_mbr000 = rep(ens_point_df$point_mbr000, 2),
point_mbr001 = rep(ens_point_df$point_mbr001, 2),
point_mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)),
~gsub("point_", "", .x)
)
rename_with(
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_point_df)), rep("b", nrow(ens_point_df))),
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
SID = rep(ens_point_df$SID, 2),
point_mbr000 = rep(ens_point_df$point_mbr000, 2),
point_mbr001 = rep(ens_point_df$point_mbr001, 2),
point_mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)),
~gsub("point_", "", .x)
) %>% class()
expect_equal(
bind(as_harp_list(a = ens_point_df, b = dplyr::mutate(ens_point_df, point_mbr003 = point_mbr001))),
rename_with(
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_point_df)), rep("b", nrow(ens_point_df))),
fcdate = rep(ens_point_df$fcdate, 2),
lead_time = rep(ens_point_df$lead_time, 2),
validdate = rep(ens_point_df$validdate, 2),
SID = rep(ens_point_df$SID, 2),
point_mbr000 = rep(ens_point_df$point_mbr000, 2),
point_mbr001 = rep(ens_point_df$point_mbr001, 2),
point_mbr003 = c(rep(NA, nrow(ens_point_df)), ens_point_df$point_mbr001)
)),
~gsub("point_", "", .x)
)
)
rename_with(
as_harp_df(tibble(
fcst_model = c(rep("fcst_a", nrow(ens_grid_df)), rep("fcst_b", nrow(ens_grid_df))),
fcdate = rep(ens_grid_df$fcdate, 2),
lead_time = rep(ens_grid_df$lead_time, 2),
validdate = rep(ens_grid_df$validdate, 2),
grid_mbr000 = as_geolist(rep(ens_grid_df$grid_mbr000, 2)),
grid_mbr001 = as_geolist(rep(ens_grid_df$grid_mbr001, 2)),
grid_mbr003 = as_geolist(c(lapply(nrow(ens_grid_df), function(x) NULL), ens_grid_df$grid_mbr001))
)),
~gsub("grid_", "", .x)
)
as_geolist(c(lapply(nrow(ens_grid_df), function(x) NULL), ens_grid_df$grid_mbr001))
as_geolist(c(lapply(1:nrow(ens_grid_df), function(x) NULL), ens_grid_df$grid_mbr001))
expect_equal(
bind(as_harp_list(a = ens_grid_df, b = dplyr::mutate(ens_grid_df, grid_mbr003 = grid_mbr001))),
rename_with(
as_harp_df(tibble(
fcst_model = c(rep("fcst_a", nrow(ens_grid_df)), rep("fcst_b", nrow(ens_grid_df))),
fcdate = rep(ens_grid_df$fcdate, 2),
lead_time = rep(ens_grid_df$lead_time, 2),
validdate = rep(ens_grid_df$validdate, 2),
grid_mbr000 = as_geolist(rep(ens_grid_df$grid_mbr000, 2)),
grid_mbr001 = as_geolist(rep(ens_grid_df$grid_mbr001, 2)),
grid_mbr003 = as_geolist(c(lapply(1:nrow(ens_grid_df), function(x) NULL), ens_grid_df$grid_mbr001))
)),
~gsub("grid_", "", .x)
)
)
expect_equal(
bind(as_harp_list(a = ens_grid_df, b = dplyr::mutate(ens_grid_df, grid_mbr003 = grid_mbr001))),
rename_with(
as_harp_df(tibble(
fcst_model = c(rep("a", nrow(ens_grid_df)), rep("b", nrow(ens_grid_df))),
fcdate = rep(ens_grid_df$fcdate, 2),
lead_time = rep(ens_grid_df$lead_time, 2),
validdate = rep(ens_grid_df$validdate, 2),
grid_mbr000 = as_geolist(rep(ens_grid_df$grid_mbr000, 2)),
grid_mbr001 = as_geolist(rep(ens_grid_df$grid_mbr001, 2)),
grid_mbr003 = as_geolist(c(lapply(1:nrow(ens_grid_df), function(x) NULL), ens_grid_df$grid_mbr001))
)),
~gsub("grid_", "", .x)
)
)
2.5 * 67.5
harpPoint::select_members()
harpPoint::select_members
class(ens_grid_df)
class(ens_point_df)
library(harpCore)
select_members(ens_point_df, c(0))
select_members(ens_point_df, c(0, 2))
select_members(ens_point_df, c(0, 1))
library(harpCore)
library(harpCore)
select_members(ens_point_list, 1)
library(harpCore)
select_members(ens_point_list, 1)
select_members(ens_point_list, 1)
members
include_lagged
library(harpCore)
select_members(ens_point_list, 1)
library(harpCore)
select_members(ens_point_list, 1)
select_members(ens_point_list, list(0, 1))
select_members(ens_point_list, list(a = 0, 1))
select_members(ens_point_list, list(a = 0, b = 1))
select_members(ens_point_list, list(a = 0, b = 1))
select_members(ens_point_list, list(a = 0, b = 0))
select_members(ens_point_list, list(a = 0, b = 3))
library(harpCore)
library(harpCore)
library(harpCore)
library(harpCore)
det_point_df[c("validdate", "lead_time")]
det_point_df
expect_equal(
select_members(ens_point_df, 0),
ens_point_df[c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")]
)
expect_equal(
select_members(ens_grid_df, 1),
ens_point_df[c("fcdate", "lead_time", "validdate", "SID", "grid_mbr001")]
)
expect_equal(
select_members(ens_grid_df, 1),
ens_grid_df[c("fcdate", "lead_time", "validdate", "SID", "grid_mbr001")]
)
expect_equal(
select_members(ens_grid_df, 1),
ens_grid_df[c("fcdate", "lead_time", "validdate", "grid_mbr001")]
)
expect_equal(
select_members(ens_point_list, 0),
structure(
list(
ens_point_list[[1]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")],
ens_point_list[[2]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")]
),
class = c("harp_list", "list")
)
)
expect_equal(
select_members(ens_point_list, 0),
structure(
list(
a = ens_point_list[[1]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")],
b = ens_point_list[[2]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")]
),
class = c("harp_list", "list")
)
)
expect_equal(
select_members(ens_point_list, c(0, 1)),
structure(
list(
a = ens_point_list[[1]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")],
b = ens_point_list[[2]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr001")]
),
class = c("harp_list", "list")
)
)
select_members(ens_point_list, c(0, 1))
select_members(ens_point_list, list(0, 1))
expect_equal(
select_members(ens_point_list, list(0, 1)),
structure(
list(
a = ens_point_list[[1]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")],
b = ens_point_list[[2]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr001")]
),
class = c("harp_list", "list")
)
)
expect_equal(
select_members(ens_point_list, list(a = 1, b = 0)),
structure(
list(
a = ens_point_list[[1]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr001")],
b = ens_point_list[[2]][c("fcdate", "lead_time", "validdate", "SID", "point_mbr000")]
),
class = c("harp_list", "list")
)
)
expect_equal(
select_members(ens_grid_list, list(a = 1, b = 0)),
structure(
list(
a = ens_grid_list[[1]][c("fcdate", "lead_time", "validdate", "grid_mbr001")],
b = ens_grid_list[[2]][c("fcdate", "lead_time", "validdate", "grid_mbr000")]
),
class = c("harp_list", "list")
)
)
ens_grid_list
expect_equal(
select_members(ens_grid_list, list(a_fcst = 1, b_fcst = 0)),
structure(
list(
a = ens_grid_list[[1]][c("fcdate", "lead_time", "validdate", "grid_mbr001")],
b = ens_grid_list[[2]][c("fcdate", "lead_time", "validdate", "grid_mbr000")]
),
class = c("harp_list", "list")
)
)
expect_equal(
select_members(ens_grid_list, list(a_fcst = 1, b_fcst = 0)),
structure(
list(
a_fcst = ens_grid_list[[1]][c("fcdate", "lead_time", "validdate", "grid_mbr001")],
b_fcst = ens_grid_list[[2]][c("fcdate", "lead_time", "validdate", "grid_mbr000")]
),
class = c("harp_list", "list")
)
)
expect_error(select_members(ens_grid_list, list(a = 0, b = 0)))
select_members(ens_grid_list, list(a = 0, b = 0))
expect_error(
select_members(ens_grid_list, list(a = 0, b = 0)),
"a, b not found in .data"
)
expect_error(
select_members(ens_grid_list, list(a_fcst = 0, b = 0)),
"a, b not found in .data"
)
expect_error(
select_members(ens_grid_list, list(a_fcst = 0, b = 0)),
"b not found in .data"
)
?expect_equal
library(harpCore)
unique_col(det_point_df, fcdate)
library(harpCore)
unique_col(det_point_df, fcdate)
unique_col(det_point_df, "fcdate")
unique_col(det_point_df, "SID")
a <- "SID"
unique_col(det_point_df, a)
unique_col(det_point_df, {{a}})
library(harpCore)
library(harpCore)
