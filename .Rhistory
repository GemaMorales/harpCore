}
test_df <- data.frame(
validdate = as_datetime(seq_dates(2021010100, 2021010123)),
point_det    = runif(24),
point_mbr000 = runif(24),
point_mbr001 = runif(24)
)
test_df[["grid_det"]]    <- make_geolist(24)
test_df[["grid_mbr000"]] <- make_geolist(24)
test_df[["grid_mbr001"]] <- make_geolist(24)
main_class <- c("harp_df", "tbl_df", "tbl", "data.frame")
test_df
as_harp_df(test_df))
as_harp_df(test_df)
as_harp_df(test_df) -> ttt
ttt
mutate(ttt(point_det = point_det * 5))
dplyr::mutate(ttt(point_det = point_det * 5))
dplyr::mutate(ttt, point_det = point_det * 5)
dplyr::mutate(ttt, point_det = point_det * 5) %>% class()
dplyr::mutate(ttt, point_det = point_det * 5) |> class()
?dplyr::mutate
methods("bind.rows")
library(dplyr)
methods("bind.rows")
?bind_rows
list(list(1))
mtcars[["hghg"]] <- "hello"
mtcars
test_df
lll <- as_harp_list(a = as_harp_df(test_df[c(1, 2)]))
lll
colnames(test_df)
lll <- as_harp_list(a = as_harp_df(test_df[c(1, 2)]), b = as_harp_df(test_df[c(1, 2)]))
lll
library(harpCore)
bind(lll)
methods("bind")
library(harpCore)
bind(lll)
bind(lll) |> class()
lll <- as_harp_list(a = as_harp_df(test_df[c(1, 2)]), b = as_harp_df(test_df[c(1, 3)]))
bind(lll) |> class()
class(llll[[2]])
class(lll[[2]])
library(harpCore)
gsub("[[:graph]](?=mbr[[digit]]{3})", "", "fshfshk_mbr001")
gsub("[[:graph]](?=mbr[[digit]]{3})", "", "fshfshk_mbr001", perl = TRUE)
gsub("k(?=mbr[[digit]]{3})", "", "fshfshk_mbr001", perl = TRUE)
gsub("k(?=mbr[[digit]]{3})", "", "fshfshk_mbr001")
gsub("k(?=mbr[[digit]]{3})", "", "fshfshk_mbr001", perl = TRUE)
gsub("k(?=_mbr[[digit]]{3})", "", "fshfshk_mbr001", perl = TRUE)
gsub("k(?=_mbr)", "", "fshfshk_mbr001", perl = TRUE)
gsub("[[:grpah:]](?=_mbr)", "", "fshfshk_mbr001", perl = TRUE)
gsub("[[:graph:]](?=_mbr)", "", "fshfshk_mbr001", perl = TRUE)
gsub("[[:graph:]]*(?=_mbr)", "", "fshfshk_mbr001", perl = TRUE)
gsub("[[:graph:]]*_(?=mbr)", "", "fshfshk_mbr001", perl = TRUE)
gsub("[[:graph:]]*_(?=mbr)", "", "fshfshk_mbr001_lag0", perl = TRUE)
ttt
rename_with(ttt, ~gsub("[[:graph:]]*_(?=mbr[[:digit:]]{3}|det$)", "", .x, perl = TRUE), matches(mbr[[:digit:]]{3}|det$))
rename_with(ttt, ~gsub("[[:graph:]]*_(?=mbr[[:digit:]]{3}|det$)", "", .x, perl = TRUE), matches("mbr[[:digit:]]{3}|det$"))
rename_with(select(ttt, validdate, starts_with("point")), ~gsub("[[:graph:]]*_(?=mbr[[:digit:]]{3}|det$)", "", .x, perl = TRUE), matches("mbr[[:digit:]]{3}|det$"))
library(harpCore)
lll
bind(
as_harp_list(
a = as_harp_df(data.frame(
validdate = seq_dates(2021010100, 2021010123),
a_mbr000  = runif(24),
a_mbr001  = runif(24)
)),
b = as_harp_df(data.frame(
validdate = seq_dates(2021010100, 2021010123),
b_mbr000 = runif(24),
b_mbr001 = runif(24)
))
)
)
.harp_list <- dplyr::rename_with(
.harp_list,
~gsub("[[:graph:]]*_(?=mbr[[:digit:]]{3}|det$)", "", .x, perl = TRUE),
dplyr::matches("mbr[[:digit:]]{3}|det$")
)
bind(
as_harp_list(
a = as_harp_df(data.frame(
validdate = seq_dates(2021010100, 2021010123),
a_mbr000  = runif(24),
a_mbr001  = runif(24)
)),
b = as_harp_df(data.frame(
validdate = seq_dates(2021010100, 2021010123),
b_mbr000 = runif(24),
b_mbr001 = runif(24)
))
)
) %>% print(n = Inf)
bind(
as_harp_list(
a = as_harp_df(data.frame(
validdate = seq_dates(2021010100, 2021010123),
a_mbr000  = runif(24),
a_mbr001  = runif(24)
)),
b = as_harp_df(data.frame(
validdate = seq_dates(2021010100, 2021010123),
b_mbr000 = runif(24),
b_mbr001 = runif(24)
))
)
) %>% class()
rename_with(select(ttt, validdate, starts_with("point")), ~gsub("[[:graph:]]*_(?=mbr[[:digit:]]{3}|det$)", "", .x, perl = TRUE), matches("mbr[[:digit:]]*|det$"))
rename_with(select(ttt, validdate, starts_with("point")), ~gsub("[[:graph:]]*_(?=mbr[[:digit:]]{3}|det$)", "", .x, perl = TRUE), matches("mbr[[:digit:]]+|det$"))
rename_with(select(ttt, validdate, starts_with("point")), ~gsub("[[:graph:]]+_(?=mbr[[:digit:]]{3}|det$)", "", .x, perl = TRUE), matches("mbr[[:digit:]]+|det$"))
rename_with(select(ttt, validdate, starts_with("point")), ~gsub("[:graph:]+_(?=mbr[:digit:]+|det$)", "", .x, perl = FALSE), matches("mbr[[:digit:]]+|det$"))
?gsub
unique_stations <- function(.data, col = sid) {
col <- rlang::enquo(col)
unique(dplyr::pull(.data, !!col))
}
dd <- data.frame(id = seq(1, 100), sid = sample(seq(1, 10), 100, replace = TRUE))
dd
unique_stations(dd)
usethis::use_package("cli")
usethis::use_package("rlang")
rlang::quo("SID")
rlang::as_label(rlang::quo("SID"))
rlang::as_label(rlang::quo(SID))
rlang::as_name(rlang::quo(SID))
rlang::as_name(rlang::quo("SID"))
unique_stations <- function(.data, col = "SID") {
col <- rlang::sym(rlang::as_name(col))
unique(dplyr::pull(.data, !!col))
}
unique_stations(dd)
unique_stations.data.frame <- function(.data, col = "SID") {
col <- rlang::as_name(col)
if (!is.element(col, colnames(.data))) {
warning("Column: `", col, "` not found.")
return(NULL)
}
col <- rlang::sym(col)
unique(dplyr::pull(.data, !!col))
}
rlang::as_name(rlang::quo("SID"))
rlang::as_name(rlang::quo(SID))
unique_stations.data.frame <- function(.data, col = "SID") {
col <- rlang::as_name(rlang::enquo(col))
if (!is.element(col, colnames(.data))) {
warning("Column: `", col, "` not found.")
return(NULL)
}
col <- rlang::sym(col)
unique(dplyr::pull(.data, !!col))
}
unique_stations(dd)
unique_stations(dd, col = SID)
unique_stations.data.frame <- function(.data, col = "SID") {
col <- rlang::as_name(rlang::enquo(col))
if (!is.element(col, colnames(.data))) {
warning("Column: `", col, "` not found.")
return(NULL)
}
col <- rlang::sym(col)
unique(dplyr::pull(.data, !!col))
}
unique_stations(dd, col = SID)
unique_stations(dd, col = "SID")
unique_stations <- function(.data, col = "SID") {
col <- rlang::as_name(rlang::enquo(col))
if (!is.element(col, colnames(.data))) {
warning("Column: `", col, "` not found.")
return(NULL)
}
col <- rlang::sym(col)
unique(dplyr::pull(.data, !!col))
}
unique_stations(dd, col = "SID")
unique_stations(dd, col = "sid")
unique_stations(dd, col = sid)
library(harpCore)
library(harpCore)
?dplyr::pull
library(harpCore)
library(harpCore)
?dplyr::arrange
?dplyr::pull
?dplyr::arrange
rlang::as_name(quos(c(a, b, c)))
rlang::as_name(rlang::quos(c(a, b, c)))
rlang::as_name(c("a", "b", "c"))
rlang::as_label(c("a", "b", "c"))
rlang::as_name(rlang::syms(c("a", "b", "c")))
?dplyr::filter
?dplyr::rename_with
library(harpCore)
library(harpCore)
library(harpCore)
library(harpCore)
?dplyr::rename_with
rlang::quos(c("a", "b"))
rlang::quos(c(a, b))
library(harpCore)
# Tests for data structures
#
# Test data
dom <- structure(
list(
projection = list(
proj  = "lcc",
lon_0 = 10.74,
lat_1 = 59.91,
lat_2 = 59.91,
R     = 6371229
),
nx = 5,
ny = 5,
dx = 50000,
dy = 50000,
clonlat = c(10.74, 59.91)
),
class = "geodomain"
)
make_geolist <- function(len) {
as_geolist(lapply(
1:len,
function(x) meteogrid::as.geofield(array(runif(25), c(5, 5)), dom)
))
}
test_df <- data.frame(
validdate = as_datetime(seq_dates(2021010100, 2021010123)),
point_det    = runif(24),
point_mbr000 = runif(24),
point_mbr001 = runif(24)
)
test_df[["grid_det"]]    <- make_geolist(24)
test_df[["grid_mbr000"]] <- make_geolist(24)
test_df[["grid_mbr001"]] <- make_geolist(24)
hl <- as_harp_list(a = as_harp_df(select(test_df, validdate, starts_with(point))))
hl <- as_harp_list(a = as_harp_df(dplyr::select(test_df, validdate, dplyr::starts_with(point))))
hl <- as_harp_list(a = as_harp_df(dplyr::select(test_df, validdate, dplyr::starts_with("point"))))
hl
hl <- c(hl, hl)
hl
names(hl)[2] <- "b"
hl
rename(hl, fff = point_det)
dplyr::rename(hl, fff = point_det)
methods("rename")
library(dplyr)
methods("rename")
dplyr::rename(hl, fff = point_det)
print(hl)
rename.harp_list(hl, fff = point_det)
rename_with.harp_list(hl, ~gsub("point", "grrr", .x))
rename_with.harp_list(hl, ~gsub("point", "grrr", .x), point_det)
rename_with.harp_list(hl, ~gsub("point", "grrr", .x), "point_det")
rename_with.harp_list(hl, ~gsub("point", "grrr", .x), dplyr::starts_with("point"))
rlang::eval(rlang::quo(c("a", "b")))
rlang::eval_bare(rlang::quo(c("a", "b")))
rlang::eval_tidy(rlang::quo(c("a", "b")))
rlang::eval_tidy(rlang::quo(c(a, b)))
rename(hl, a = point_det)
filter(hl, point_det > 3)
library(dplyr)
filter(hl, point_det > 3)
filter(structure(hl, class = "harp_list"), point_det > 3)
methods("rename")
methods("c")
library(harpCore)
methods("rename")
?methods
getS3method("rename", "harp_list")
library(harpCore)
methods(class = "harp_list")
print(methods(class = "harp_list"), byclass = FALSE)
# Tests for data structures
#
# Test data
dom <- structure(
list(
projection = list(
proj  = "lcc",
lon_0 = 10.74,
lat_1 = 59.91,
lat_2 = 59.91,
R     = 6371229
),
nx = 5,
ny = 5,
dx = 50000,
dy = 50000,
clonlat = c(10.74, 59.91)
),
class = "geodomain"
)
make_geolist <- function(len) {
as_geolist(lapply(
1:len,
function(x) meteogrid::as.geofield(array(runif(25), c(5, 5)), dom)
))
}
test_df <- data.frame(
validdate = as_datetime(seq_dates(2021010100, 2021010123)),
point_det    = runif(24),
point_mbr000 = runif(24),
point_mbr001 = runif(24)
)
test_df
hl <- as_harp_list(a = as_harp_df(test_df), as_harp_df(test_df))
library(dplyr)
hl
filter(hl, point_det < 0.2)
library(harpCore)
library(dplyr)
methods("filter")
methods("mutate")
hl
mutate(hl, bbb = "jhfhsd")
library(harpCore)
library(dplye)
library(dplyr)
methods("mutate")
methods("filter")
methods("rename_with")
library(harpCore)
mutate(hl, bbb = "jhfhsd")
transmute(hl, point_det, bbb = "jhfhsd")
?mutate
?rename
library(harpCore)
library(harpCore)
?select
?transmute
library(harpCore)
library(harpCore)
methods("rename")
library(dplyr)
methods("rename")
library(harpCore)
library(harpCore)
library(harpCore)
hl
# Tests for data structures
#
# Test data
dom <- structure(
list(
projection = list(
proj  = "lcc",
lon_0 = 10.74,
lat_1 = 59.91,
lat_2 = 59.91,
R     = 6371229
),
nx = 5,
ny = 5,
dx = 50000,
dy = 50000,
clonlat = c(10.74, 59.91)
),
class = "geodomain"
)
make_geolist <- function(len) {
as_geolist(lapply(
1:len,
function(x) meteogrid::as.geofield(array(runif(25), c(5, 5)), dom)
))
}
test_df <- data.frame(
validdate = as_datetime(seq_dates(2021010100, 2021010123)),
point_det    = runif(24),
point_mbr000 = runif(24),
point_mbr001 = runif(24)
)
hl <- as_harp_list(a = as_harp_df(test_df), b = as_harp_df(test_df))
methods("filter")
filter(hl, point_det > 0.2)
filter(hl, point_det > 0.5)
hl
filter(hl, point_det > 0)
mutate(hl, bb = 3)
filter(hl$a, point_det > 0)
filter(hl$a, point_det > 0.5)
filter(hl$b, point_det > 0.5)
library(harpCore)
library(harpCore)
library(dplyr)
methods("filter")
methods("mutate")
library(dplyr)
library(harpCore)
methods("filter")
hl
filter(hl, point_det > 0.5)
dplyr::filter(hl, point_det > 0.5)
library(harpCore)
dplyr::filter(hl, point_det > 0.5)
?detach
detach("package:dplyr", unload = TRUE)
sessionInfo()
filter()
filter(hl, point_det > 0.5)
methods("filter")
dplyr::filter(hl, point_det > 0.5)
library(harpCore)
dplyr::filter(hl, point_det > 0.5)
library(harpCore)
library(dplyr)
getS3method("filter", "harp_list")
# Tests for data structures
#
# Test data
dom <- structure(
list(
projection = list(
proj  = "lcc",
lon_0 = 10.74,
lat_1 = 59.91,
lat_2 = 59.91,
R     = 6371229
),
nx = 5,
ny = 5,
dx = 50000,
dy = 50000,
clonlat = c(10.74, 59.91)
),
class = "geodomain"
)
make_geolist <- function(len) {
as_geolist(lapply(
1:len,
function(x) meteogrid::as.geofield(array(runif(25), c(5, 5)), dom)
))
}
test_df <- data.frame(
validdate = as_datetime(seq_dates(2021010100, 2021010123)),
point_det    = runif(24),
point_mbr000 = runif(24),
point_mbr001 = runif(24)
)
test_df[["grid_det"]]    <- make_geolist(24)
test_df[["grid_mbr000"]] <- make_geolist(24)
test_df[["grid_mbr001"]] <- make_geolist(24)
test_df
dd <- as_harp_df(test_df)
dd
mutate(dd, fcdate = dd$validdate[1])
mutate(dd, fcdate = dd$validdate[1], .before = everything())
mutate(dd, fcdate = dd$validdate[1], .before = everything()) %>% mutate(lead_time = (validdate - fcdate) / 3600, .after = fcdate)
mutate(dd, fcdate = dd$validdate[1], .before = everything()) %>% mutate(lead_time = as.numeric((validdate - fcdate) / 3600), .after = fcdate)
mutate(dd, fcdate = dd$validdate[1], .before = everything()) %>% mutate(lead_time = as.numeric((validdate - fcdate) / 3600), .after = fcdate) -> dd
names(dd$lead_time <- paste0(dd$lead_time, "h"))
dd
dd$lead_time
mutate(dd, fcdate = dd$validdate[1], .before = everything()) %>% mutate(lead_time = as.numeric((validdate - fcdate) / 3600), .after = fcdate) -> dd
dd
names(dd$lead_time) <- paste0(dd$lead_time, "h")
dd
dd$lead_time
select(dd, -contains("mbr"), -contains("grid"))
select(dd, -contains("mbr"), -contains("grid")) -> det_point_df
select(dd, -contains("det"), -contains("grid")) -> ens_point_df
ens_point_df
select(dd, -contains("mbr"), -contains("point")) -> det_grid_df
get_grid_df
det_grid_df
select(dd, -contains("det"), -contains("point")) -> ens_grid_df
ens_grid_df
det_point_df
det_point_list <- as_harp_list(a_fcst = det_point_df, b_fcst = mutate(det_point_df, point_det = runif(24)))
det_point_list
det_point_list[[2]]
det_point_list[[2]] %>% class()
det_point_list <- as_harp_list(a_fcst = ens_point_df, b_fcst = mutate(ens_point_df, across(contains("mbr"), ~runif(24)))
)
det_point_list
dd
dd$grid_det[[1]] %>% print.default()
ens_point_list <- as_harp_list(a_fcst = ens_point_df, b_fcst = mutate(ens_point_df, across(contains("mbr"), ~runif(24)))
)
det_point_list <- as_harp_list(a_fcst = det_point_df, b_fcst = mutate(det_point_df, point_det = runif(24)))
det_point_list
ens_point_list
det_grid_df
ggg <- function() meteogrid::as.geofield(array(runif(25), c(5, 5)), domain = dom)
ggg
ggg()
det_grid_list <- as_harp_list(a_fcst = det_grid_df, b_fcst = mutate(det_grid_df, grid_det = as_geolist(lapply(1:24, ggg()))))
det_grid_list <- as_harp_list(a_fcst = det_grid_df, b_fcst = mutate(det_grid_df, grid_det = as_geolist(lapply(1:24, ggg)))
)
lapply(1:24, ggg)
ggg <- function(x) meteogrid::as.geofield(array(runif(25), c(5, 5)), domain = dom)
lapply(1:24, ggg)
det_grid_list <- as_harp_list(a_fcst = det_grid_df, b_fcst = mutate(det_grid_df, grid_det = as_geolist(lapply(1:24, ggg))))
det_grid_list
det_grid_list$a$grid_det[[1]] %>% print.default()
det_grid_list$b$grid_det[[1]] %>% print.default()
ens_grid_list <- as_harp_list(a_fcst = ens_grid_df, b_fcst = mutate(ens_grid_df, across(contains("mbr"), ~as_geolist(lapply(1:24, ggg)))))
ens_grid_list
ens_grid_list$a$grid_mbr000[[1]] %>% print.default()
ens_grid_list$b$grid_mbr000[[1]] %>% print.default()
usethis::use_dat(det_point_df)
usethis::use_data(det_point_df)
usethis::use_data(ens_point_df)
usethis::use_data(det_grid_df)
usethis::use_data(ens_grid_df)
usethis::use_data(det_point_list)
usethis::use_data(ens_point_list)
usethis::use_data(det_grid_list)
usethis::use_data(ens_grid_list)
